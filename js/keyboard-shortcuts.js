// ÈîÆÁõòÂø´Êç∑ÈîÆÁÆ°ÁêÜÁ≥ªÁªü
class KeyboardShortcuts {
    constructor() {
        this.shortcuts = new Map();
        this.isEnabled = true;
        this.helpVisible = false;
        this.init();
    }

    init() {
        this.setupDefaultShortcuts();
        this.setupEventListeners();
        this.createHelpOverlay();
        console.log('‚å®Ô∏è ÈîÆÁõòÂø´Êç∑ÈîÆÁ≥ªÁªüÂ∑≤ÂàùÂßãÂåñ');
    }

    setupDefaultShortcuts() {
        // ËÅäÂ§©Áõ∏ÂÖ≥
        this.register('Ctrl+Enter', () => {
            if (window.chatSystem && window.chatSystem.isConnected) {
                // ‰ΩøÁî®Êñ∞ÁöÑSocket.ioËÅäÂ§©Á≥ªÁªü
                if (window.chatSystem.sendMessage) {
                    const messageInput = document.getElementById('messageInput');
                    const message = messageInput?.value?.trim();
                    if (message) {
                        window.chatSystem.sendMessage(message);
                        messageInput.value = '';
                    }
                } else if (window.chatSystem.handleSendMessage) {
                    // ÂÖºÂÆπÊóßËÅäÂ§©Á≥ªÁªü
                    window.chatSystem.handleSendMessage();
                }
            }
        }, 'ÂèëÈÄÅËÅäÂ§©Ê∂àÊÅØ');

        this.register('F11', () => {
            if (window.chatSystem) {
                window.chatSystem.toggleChatFullscreen();
            }
        }, 'ÂàáÊç¢ËÅäÂ§©ÂÖ®Â±è');

        // Èü≥ÊïàÊéßÂà∂
        this.register('Ctrl+M', () => {
            if (window.soundSystem) {
                window.soundSystem.toggleSound();
            }
        }, 'ÂàáÊç¢Èü≥ÊïàÂºÄÂÖ≥');

        this.register('Ctrl+Shift+M', () => {
            if (window.soundSystem) {
                window.soundSystem.toggleMute();
            }
        }, 'ÈùôÈü≥/ÂèñÊ∂àÈùôÈü≥');

        // ÁïåÈù¢ÊéßÂà∂
        this.register('Ctrl+Shift+H', () => {
            this.toggleHelp();
        }, 'ÊòæÁ§∫/ÈöêËóèÂø´Êç∑ÈîÆÂ∏ÆÂä©');

        this.register('Escape', () => {
            this.handleEscape();
        }, 'ÂèñÊ∂à/ÂÖ≥Èó≠ÂΩìÂâçÊìç‰Ωú');

        // Á≥ªÁªüÂäüËÉΩ
        this.register('Ctrl+R', (e) => {
            e.preventDefault();
            if (window.loadingManager) {
                window.loadingManager.show('Âà∑Êñ∞Á≥ªÁªü...', 'Ê≠£Âú®ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ');
            }
            setTimeout(() => {
                location.reload();
            }, 500);
        }, 'Âà∑Êñ∞È°µÈù¢');

        // ÂºÄÂèëË∞ÉËØï (‰ªÖÂú®ÂºÄÂèëÁéØÂ¢É)
        this.register('Ctrl+Shift+D', () => {
            this.toggleDebugMode();
        }, 'ÂàáÊç¢Ë∞ÉËØïÊ®°Âºè');

        // ÊÄßËÉΩËØäÊñ≠
        this.register('Ctrl+Shift+P', () => {
            this.runPerformanceDiagnostics();
        }, 'ËøêË°åÊÄßËÉΩËØäÊñ≠');

        console.log(`üéπ Ê≥®ÂÜå‰∫Ü ${this.shortcuts.size} ‰∏™Âø´Êç∑ÈîÆ`);
    }

    setupEventListeners() {
        document.addEventListener('keydown', (e) => {
            if (!this.isEnabled) return;

            const combo = this.getKeyCombo(e);
            const shortcut = this.shortcuts.get(combo);

            if (shortcut) {
                e.preventDefault();
                try {
                    shortcut.action(e);
                    console.log(`‚å®Ô∏è ÊâßË°åÂø´Êç∑ÈîÆ: ${combo}`);
                    
                    // Êí≠ÊîæÈü≥Êïà
                    if (window.soundSystem) {
                        window.soundSystem.play('button_click');
                    }
                } catch (error) {
                    console.error(`Âø´Êç∑ÈîÆÊâßË°åÂ§±Ë¥• ${combo}:`, error);
                }
            }
        });
    }

    getKeyCombo(e) {
        const parts = [];
        
        if (e.ctrlKey) parts.push('Ctrl');
        if (e.shiftKey) parts.push('Shift');
        if (e.altKey) parts.push('Alt');
        if (e.metaKey) parts.push('Meta');
        
        // Ê£ÄÊü•keyÊòØÂê¶Â≠òÂú®
        if (!e.key) return parts.join('+');
        
        // ÁâπÊÆäÈîÆÂ§ÑÁêÜ
        if (e.key === 'Enter') parts.push('Enter');
        else if (e.key === 'Escape') parts.push('Escape');
        else if (e.key.startsWith('F') && e.key.length <= 3) parts.push(e.key);
        else parts.push(e.key.toUpperCase());
        
        return parts.join('+');
    }

    register(combo, action, description = '') {
        this.shortcuts.set(combo, {
            action,
            description,
            combo
        });
    }

    unregister(combo) {
        return this.shortcuts.delete(combo);
    }

    enable() {
        this.isEnabled = true;
        console.log('‚úÖ Âø´Êç∑ÈîÆÁ≥ªÁªüÂ∑≤ÂêØÁî®');
    }

    disable() {
        this.isEnabled = false;
        console.log('‚è∏Ô∏è Âø´Êç∑ÈîÆÁ≥ªÁªüÂ∑≤Á¶ÅÁî®');
    }

    handleEscape() {
        // ‰ºòÂÖàÁ∫ßÂ§ÑÁêÜESCÈîÆ
        const chatContainer = document.querySelector('.chat-container');
        if (chatContainer && chatContainer.classList.contains('fullscreen')) {
            if (window.chatSystem) {
                window.chatSystem.toggleChatFullscreen();
            }
            return;
        }

        // ÂÖ≥Èó≠Â∏ÆÂä©ÁïåÈù¢
        if (this.helpVisible) {
            this.toggleHelp();
            return;
        }

        // ÂÖ∂‰ªñESCÂ§ÑÁêÜ
        console.log('üö™ ESCÈîÆÂ§ÑÁêÜÂÆåÊàê');
    }

    toggleHelp() {
        const helpOverlay = document.getElementById('shortcut-help-overlay');
        if (!helpOverlay) return;

        this.helpVisible = !this.helpVisible;
        helpOverlay.style.display = this.helpVisible ? 'flex' : 'none';

        if (this.helpVisible) {
            this.updateHelpContent();
            if (window.soundSystem) {
                window.soundSystem.play('menu_open');
            }
        } else {
            if (window.soundSystem) {
                window.soundSystem.play('menu_close');
            }
        }
    }

    createHelpOverlay() {
        const overlay = document.createElement('div');
        overlay.id = 'shortcut-help-overlay';
        overlay.innerHTML = `
            <div class="shortcut-help-container">
                <div class="shortcut-help-header">
                    <h3>‚å®Ô∏è ÈîÆÁõòÂø´Êç∑ÈîÆ</h3>
                    <button class="help-close-btn" onclick="keyboardShortcuts.toggleHelp()">√ó</button>
                </div>
                <div class="shortcut-help-content">
                    <!-- Âä®ÊÄÅÁîüÊàêÂÜÖÂÆπ -->
                </div>
                <div class="shortcut-help-footer">
                    <p>Êåâ <kbd>Ctrl+Shift+H</kbd> Êàñ <kbd>ESC</kbd> ÂÖ≥Èó≠Ê≠§Â∏ÆÂä©</p>
                </div>
            </div>
        `;

        // Ê∑ªÂä†Ê†∑Âºè
        const style = document.createElement('style');
        style.textContent = `
            #shortcut-help-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.9);
                backdrop-filter: blur(5px);
                display: none;
                justify-content: center;
                align-items: center;
                z-index: 9998;
                font-family: 'Share Tech Mono', monospace;
            }

            .shortcut-help-container {
                background: #111;
                border: 2px solid #ff6600;
                border-radius: 8px;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 0 30px rgba(255, 102, 0, 0.5);
            }

            .shortcut-help-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px;
                border-bottom: 1px solid #333;
                background: rgba(255, 102, 0, 0.1);
            }

            .shortcut-help-header h3 {
                color: #ff6600;
                margin: 0;
                font-size: 18px;
            }

            .help-close-btn {
                background: none;
                border: none;
                color: #ff6600;
                font-size: 24px;
                cursor: pointer;
                padding: 0;
                width: 30px;
                height: 30px;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .help-close-btn:hover {
                background: rgba(255, 102, 0, 0.2);
                border-radius: 50%;
            }

            .shortcut-help-content {
                padding: 20px;
                color: #ccc;
            }

            .shortcut-group {
                margin-bottom: 20px;
            }

            .shortcut-group h4 {
                color: #ff8800;
                font-size: 14px;
                margin-bottom: 10px;
                border-bottom: 1px solid #333;
                padding-bottom: 5px;
            }

            .shortcut-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 0;
                border-bottom: 1px solid rgba(255, 102, 0, 0.1);
            }

            .shortcut-item:last-child {
                border-bottom: none;
            }

            .shortcut-keys {
                display: flex;
                gap: 4px;
            }

            .shortcut-keys kbd {
                background: #333;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 4px 8px;
                font-size: 11px;
                color: #ff6600;
                font-family: inherit;
            }

            .shortcut-description {
                flex: 1;
                margin-left: 15px;
                font-size: 12px;
            }

            .shortcut-help-footer {
                padding: 15px 20px;
                border-top: 1px solid #333;
                text-align: center;
                color: #888;
                font-size: 11px;
            }

            .shortcut-help-footer kbd {
                background: #333;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 2px 6px;
                color: #ff6600;
            }

            @media (max-width: 768px) {
                .shortcut-help-container {
                    max-width: 90vw;
                    margin: 20px;
                }

                .shortcut-item {
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 5px;
                }

                .shortcut-description {
                    margin-left: 0;
                }
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(overlay);
    }

    updateHelpContent() {
        const content = document.querySelector('.shortcut-help-content');
        if (!content) return;

        const groups = {
            'ËÅäÂ§©ÂäüËÉΩ': [],
            'Èü≥ÊïàÊéßÂà∂': [],
            'ÁïåÈù¢ÊéßÂà∂': [],
            'Á≥ªÁªüÂäüËÉΩ': [],
            'ÂºÄÂèëË∞ÉËØï': []
        };

        // ÂàÜÁªÑÂø´Êç∑ÈîÆ
        for (const [combo, shortcut] of this.shortcuts.entries()) {
            const desc = shortcut.description;
            if (desc.includes('ËÅäÂ§©') || desc.includes('Ê∂àÊÅØ')) {
                groups['ËÅäÂ§©ÂäüËÉΩ'].push({ combo, ...shortcut });
            } else if (desc.includes('Èü≥Êïà') || desc.includes('Èü≥')) {
                groups['Èü≥ÊïàÊéßÂà∂'].push({ combo, ...shortcut });
            } else if (desc.includes('ÁïåÈù¢') || desc.includes('ÊòæÁ§∫') || desc.includes('ÂÖ®Â±è')) {
                groups['ÁïåÈù¢ÊéßÂà∂'].push({ combo, ...shortcut });
            } else if (desc.includes('Ë∞ÉËØï')) {
                groups['ÂºÄÂèëË∞ÉËØï'].push({ combo, ...shortcut });
            } else {
                groups['Á≥ªÁªüÂäüËÉΩ'].push({ combo, ...shortcut });
            }
        }

        let html = '';
        for (const [groupName, shortcuts] of Object.entries(groups)) {
            if (shortcuts.length === 0) continue;

            html += `<div class="shortcut-group">
                <h4>${groupName}</h4>`;

            for (const shortcut of shortcuts) {
                const keys = shortcut.combo.split('+').map(key => `<kbd>${key}</kbd>`).join('');
                html += `<div class="shortcut-item">
                    <div class="shortcut-keys">${keys}</div>
                    <div class="shortcut-description">${shortcut.description}</div>
                </div>`;
            }

            html += '</div>';
        }

        content.innerHTML = html;
    }

    toggleDebugMode() {
        const isDebug = document.body.classList.toggle('debug-mode');
        console.log(`üêõ Ë∞ÉËØïÊ®°Âºè: ${isDebug ? 'ÂºÄÂêØ' : 'ÂÖ≥Èó≠'}`);
        
        if (isDebug) {
            console.log('ÂΩìÂâçÊ≥®ÂÜåÁöÑÂø´Êç∑ÈîÆ:', Array.from(this.shortcuts.keys()));
        }
    }

    runPerformanceDiagnostics() {
        if (window.runPerformanceDiagnostics) {
            console.log('üîç ÂêØÂä®ÊÄßËÉΩËØäÊñ≠...');
            if (window.soundSystem) {
                window.soundSystem.play('system_startup');
            }
            window.runPerformanceDiagnostics();
        } else {
            console.warn('‚ö†Ô∏è ÊÄßËÉΩËØäÊñ≠Â∑•ÂÖ∑Êú™Âä†ËΩΩ');
        }
    }

    // Ëé∑ÂèñÊâÄÊúâÂø´Êç∑ÈîÆÂàóË°®
    getShortcuts() {
        return Array.from(this.shortcuts.entries()).map(([combo, shortcut]) => ({
            combo,
            description: shortcut.description
        }));
    }
}

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
window.keyboardShortcuts = new KeyboardShortcuts();

// ÂØºÂá∫ÁªôÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®
if (typeof module !== 'undefined' && module.exports) {
    module.exports = KeyboardShortcuts;
} 